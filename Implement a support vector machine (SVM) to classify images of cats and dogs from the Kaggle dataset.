import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import cv2
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
data = pd.read_csv('your_dataset.csv')

# Preprocess images (assuming you have image paths and labels)
images = []
labels = []
for index, row in data.iterrows():
    image_path = row['image_path']
    label = row['label']  # Replace 'label' with the actual column name
    image = cv2.imread(image_path)
    image = cv2.resize(image, (224, 224))  # Adjust size as needed
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    images.append(image)
    labels.append(label)

# Convert images to a suitable format (e.g., NumPy array)
images = np.array(images)

# Feature extraction (using a pre-trained CNN for example)
from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Model

base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
model = Model(inputs=base_model.input, outputs=base_model.output)
X = model.predict(images)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42)

# Create and train the SVM model
svm_model = SVC(kernel='linear')
svm_model.fit(X_train, y_train)

# Make predictions and evaluate
y_pred = svm_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print("Accuracy:", accuracy)
print("Classification Report:\n", report)
